generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  TRAVELLER
  HOST
  ADMIN
}

enum ServiceType {
  GUIDE
  PHOTOGRAPHER
  COMBO
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}

enum ContactMethod {
  WHATSAPP
  TELEGRAM
  LINE
  EMAIL
  ZOOM
}

enum CurrencyCode {
  IDR
  USD
  JPY
  EUR
  SGD
  THB
}

enum StoryType {
  TRAVELER
  HOST
}

model Country {
  id     String  @id @default(cuid())
  name   String  @unique
  code   String  @unique
  cities City[]
  users  User[]
  hosts  Host[]
}

model City {
  id         String  @id @default(cuid())
  name       String
  country    Country @relation(fields: [countryId], references: [id])
  countryId  String
  lat        Float
  lng        Float

  users      User[]
  hosts      Host[]
  topDestination TopDestination?

  @@unique([name, countryId])
}

model TopDestination {
  id        String   @id @default(cuid())
  city     City     @relation(fields: [cityId], references: [id])
  cityId   String   @unique
  order    Int      // Untuk urutan tampil di homepage
  imageUrl String?
  createdAt DateTime @default(now())
}

model Language {
  id     String  @id @default(cuid())
  name   String  @unique
  hosts  HostLanguage[]
}

model User {
  id           String     @id @default(cuid())
  email        String     @unique
  password     String
  name         String?
  avatarUrl    String?
  phone        String?
  bio          String?
  role         Role       @default(TRAVELLER)
  countryId    String?
  cityId       String?
  country      Country?   @relation(fields: [countryId], references: [id])
  city         City?      @relation(fields: [cityId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  host         Host?
  bookings     Booking[]
  wishlist     Wishlist[]
  stories      Story[]
  storyLikes   StoryLike[]
  storyComments StoryComment[]
  referrals    Referral[] @relation("Referrer")
  referredBy   Referral?  @relation("Referee")
  referredById String?
}

model Host {
  id              String               @id @default(cuid())
  user            User                 @relation(fields: [userId], references: [id])
  userId          String               @unique
  country         Country              @relation(fields: [countryId], references: [id])
  countryId       String
  city            City                 @relation(fields: [cityId], references: [id])
  cityId          String
  lat             Float
  lng             Float
  isGuide         Boolean              @default(false)
  isPhotographer  Boolean              @default(false)
  profileVideo    String?
  isVerified      Boolean              @default(false)
  createdAt       DateTime             @default(now())

  languages           HostLanguage[]
  services            Service[]
  blockedDates        BlockedDate[]
  badges              HostBadge[]
  reviews             Review[]
  photographerSkills  PhotographerSkill[]
  photographerGears   PhotographerGear[]
}

model HostLanguage {
  id         String   @id @default(cuid())
  host       Host     @relation(fields: [hostId], references: [id])
  hostId     String
  language   Language @relation(fields: [languageId], references: [id])
  languageId String

  @@unique([hostId, languageId])
}

model PhotographerSkill {
  id      String @id @default(cuid())
  host    Host   @relation(fields: [hostId], references: [id])
  hostId  String
  skill   String
}

model PhotographerGear {
  id       String @id @default(cuid())
  host     Host   @relation(fields: [hostId], references: [id])
  hostId   String
  gearType String
  name     String
}

model Service {
  id           String      @id @default(cuid())
  host         Host        @relation(fields: [hostId], references: [id])
  hostId       String
  title        String
  description  String
  type         ServiceType
  price        Int
  currency     CurrencyCode @default(IDR)
  duration     Int
  tags         String[]
  images       String[]
  createdAt    DateTime    @default(now())

  bookings     Booking[]
  wishlist     Wishlist[]
  itineraries  Itinerary[]
}

model Itinerary {
  id          String   @id @default(cuid())
  service     Service  @relation(fields: [serviceId], references: [id])
  serviceId   String
  step        Int
  title       String
  description String
  duration    Int
}

model Booking {
  id             String        @id @default(cuid())
  user           User          @relation(fields: [userId], references: [id])
  userId         String
  service        Service       @relation(fields: [serviceId], references: [id])
  serviceId      String
  date           DateTime
  adults         Int           @default(1)
  children       Int           @default(0)
  contactMethod  ContactMethod
  contactDetail  String
  meetingPoint   String?
  totalPrice     Int
  currency       CurrencyCode @default(IDR)
  status         BookingStatus @default(PENDING)
  promoCode      PromoCode?    @relation(fields: [promoCodeId], references: [id])
  promoCodeId    String?
  createdAt      DateTime      @default(now())

  review         Review?
  currencyConversionLog CurrencyConversionLog?
}

model CurrencyConversionLog {
  id               String   @id @default(cuid())
  booking          Booking  @relation(fields: [bookingId], references: [id])
  bookingId        String   @unique
  sourceCurrency   CurrencyCode
  targetCurrency   CurrencyCode
  rate             Float
  convertedAmount  Int
  createdAt        DateTime @default(now())
}

model Review {
  id        String   @id @default(cuid())
  booking   Booking  @relation(fields: [bookingId], references: [id])
  bookingId String   @unique
  host      Host     @relation(fields: [hostId], references: [id])
  hostId    String
  rating    Int
  comment   String
  createdAt DateTime @default(now())
}

model Wishlist {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  service    Service  @relation(fields: [serviceId], references: [id])
  serviceId  String
  createdAt  DateTime @default(now())

  @@unique([userId, serviceId])
}

model PromoCode {
  id           String   @id @default(cuid())
  code         String   @unique
  title        String
  description  String
  discountType String   // 'percentage' | 'flat'
  amount       Int
  validFrom    DateTime
  validUntil   DateTime
  usageLimit   Int?
  usedCount    Int      @default(0)
  isActive     Boolean  @default(true)

  bookings     Booking[]
}

model HostBadge {
  id        String   @id @default(cuid())
  host      Host     @relation(fields: [hostId], references: [id])
  hostId    String
  type      String
  createdAt DateTime @default(now())
}

model BlockedDate {
  id     String   @id @default(cuid())
  host   Host     @relation(fields: [hostId], references: [id])
  hostId String
  date   DateTime
}

model Referral {
  id         String   @id @default(cuid())
  referrer   User     @relation("Referrer", fields: [referrerId], references: [id])
  referrerId String
  referee    User     @relation("Referee", fields: [refereeId], references: [id])
  refereeId  String   @unique
  usedAt     DateTime?
}

model Story {
  id          String         @id @default(cuid())
  user        User           @relation(fields: [userId], references: [id])
  userId      String
  type        StoryType
  title       String
  content     String
  imageUrl    String
  location    String
  postedAt    DateTime
  createdAt   DateTime       @default(now())

  likes       StoryLike[]
  comments    StoryComment[]
}

model StoryLike {
  id       String   @id @default(cuid())
  story    Story    @relation(fields: [storyId], references: [id])
  storyId  String
  user     User     @relation(fields: [userId], references: [id])
  userId   String
  createdAt DateTime @default(now())

  @@unique([storyId, userId])
}

model StoryComment {
  id        String   @id @default(cuid())
  story     Story    @relation(fields: [storyId], references: [id])
  storyId   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  content   String
  createdAt DateTime @default(now())
}
