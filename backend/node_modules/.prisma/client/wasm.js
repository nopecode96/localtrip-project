
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.TopDestinationScalarFieldEnum = {
  id: 'id',
  cityId: 'cityId',
  order: 'order',
  imageUrl: 'imageUrl',
  createdAt: 'createdAt'
};

exports.Prisma.CountryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code'
};

exports.Prisma.CityScalarFieldEnum = {
  id: 'id',
  name: 'name',
  countryId: 'countryId',
  lat: 'lat',
  lng: 'lng'
};

exports.Prisma.LanguageScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  name: 'name',
  avatarUrl: 'avatarUrl',
  phone: 'phone',
  bio: 'bio',
  role: 'role',
  countryId: 'countryId',
  cityId: 'cityId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  referredById: 'referredById'
};

exports.Prisma.HostScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  countryId: 'countryId',
  cityId: 'cityId',
  lat: 'lat',
  lng: 'lng',
  isGuide: 'isGuide',
  isPhotographer: 'isPhotographer',
  profileVideo: 'profileVideo',
  isVerified: 'isVerified',
  createdAt: 'createdAt'
};

exports.Prisma.HostLanguageScalarFieldEnum = {
  id: 'id',
  hostId: 'hostId',
  languageId: 'languageId'
};

exports.Prisma.PhotographerSkillScalarFieldEnum = {
  id: 'id',
  hostId: 'hostId',
  skill: 'skill'
};

exports.Prisma.PhotographerGearScalarFieldEnum = {
  id: 'id',
  hostId: 'hostId',
  gearType: 'gearType',
  name: 'name'
};

exports.Prisma.ServiceScalarFieldEnum = {
  id: 'id',
  hostId: 'hostId',
  title: 'title',
  description: 'description',
  type: 'type',
  price: 'price',
  currency: 'currency',
  duration: 'duration',
  tags: 'tags',
  images: 'images',
  createdAt: 'createdAt'
};

exports.Prisma.ItineraryScalarFieldEnum = {
  id: 'id',
  serviceId: 'serviceId',
  step: 'step',
  title: 'title',
  description: 'description',
  duration: 'duration'
};

exports.Prisma.BookingScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  serviceId: 'serviceId',
  date: 'date',
  adults: 'adults',
  children: 'children',
  contactMethod: 'contactMethod',
  contactDetail: 'contactDetail',
  meetingPoint: 'meetingPoint',
  totalPrice: 'totalPrice',
  currency: 'currency',
  status: 'status',
  promoCodeId: 'promoCodeId',
  createdAt: 'createdAt'
};

exports.Prisma.CurrencyConversionLogScalarFieldEnum = {
  id: 'id',
  bookingId: 'bookingId',
  sourceCurrency: 'sourceCurrency',
  targetCurrency: 'targetCurrency',
  rate: 'rate',
  convertedAmount: 'convertedAmount',
  createdAt: 'createdAt'
};

exports.Prisma.ReviewScalarFieldEnum = {
  id: 'id',
  bookingId: 'bookingId',
  hostId: 'hostId',
  rating: 'rating',
  comment: 'comment',
  createdAt: 'createdAt'
};

exports.Prisma.WishlistScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  serviceId: 'serviceId',
  createdAt: 'createdAt'
};

exports.Prisma.PromoCodeScalarFieldEnum = {
  id: 'id',
  code: 'code',
  title: 'title',
  description: 'description',
  discountType: 'discountType',
  amount: 'amount',
  validFrom: 'validFrom',
  validUntil: 'validUntil',
  usageLimit: 'usageLimit',
  usedCount: 'usedCount',
  isActive: 'isActive'
};

exports.Prisma.HostBadgeScalarFieldEnum = {
  id: 'id',
  hostId: 'hostId',
  type: 'type',
  createdAt: 'createdAt'
};

exports.Prisma.BlockedDateScalarFieldEnum = {
  id: 'id',
  hostId: 'hostId',
  date: 'date'
};

exports.Prisma.ReferralScalarFieldEnum = {
  id: 'id',
  referrerId: 'referrerId',
  refereeId: 'refereeId',
  usedAt: 'usedAt'
};

exports.Prisma.StoryScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  title: 'title',
  content: 'content',
  imageUrl: 'imageUrl',
  location: 'location',
  postedAt: 'postedAt',
  createdAt: 'createdAt'
};

exports.Prisma.StoryLikeScalarFieldEnum = {
  id: 'id',
  storyId: 'storyId',
  userId: 'userId',
  createdAt: 'createdAt'
};

exports.Prisma.StoryCommentScalarFieldEnum = {
  id: 'id',
  storyId: 'storyId',
  userId: 'userId',
  content: 'content',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.Role = exports.$Enums.Role = {
  TRAVELLER: 'TRAVELLER',
  HOST: 'HOST',
  ADMIN: 'ADMIN'
};

exports.ServiceType = exports.$Enums.ServiceType = {
  GUIDE: 'GUIDE',
  PHOTOGRAPHER: 'PHOTOGRAPHER',
  COMBO: 'COMBO'
};

exports.CurrencyCode = exports.$Enums.CurrencyCode = {
  IDR: 'IDR',
  USD: 'USD',
  JPY: 'JPY',
  EUR: 'EUR',
  SGD: 'SGD',
  THB: 'THB'
};

exports.ContactMethod = exports.$Enums.ContactMethod = {
  WHATSAPP: 'WHATSAPP',
  TELEGRAM: 'TELEGRAM',
  LINE: 'LINE',
  EMAIL: 'EMAIL',
  ZOOM: 'ZOOM'
};

exports.BookingStatus = exports.$Enums.BookingStatus = {
  PENDING: 'PENDING',
  CONFIRMED: 'CONFIRMED',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.StoryType = exports.$Enums.StoryType = {
  TRAVELER: 'TRAVELER',
  HOST: 'HOST'
};

exports.Prisma.ModelName = {
  TopDestination: 'TopDestination',
  Country: 'Country',
  City: 'City',
  Language: 'Language',
  User: 'User',
  Host: 'Host',
  HostLanguage: 'HostLanguage',
  PhotographerSkill: 'PhotographerSkill',
  PhotographerGear: 'PhotographerGear',
  Service: 'Service',
  Itinerary: 'Itinerary',
  Booking: 'Booking',
  CurrencyConversionLog: 'CurrencyConversionLog',
  Review: 'Review',
  Wishlist: 'Wishlist',
  PromoCode: 'PromoCode',
  HostBadge: 'HostBadge',
  BlockedDate: 'BlockedDate',
  Referral: 'Referral',
  Story: 'Story',
  StoryLike: 'StoryLike',
  StoryComment: 'StoryComment'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
